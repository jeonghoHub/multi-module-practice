// Gradle 빌드 스크립트의 빌드 환경을 설정합니다. 여기서는 스크립트에서 사용할 플러그인 및 의존성을 선언합니다.
buildscript {
    // 사용자 정의 확장 속성을 정의합니다. 여기서는 springBootVersion 변수를 선언하여 Spring Boot 버전을 지정합니다.
    ext {
        springBootVersion = '2.6.2'
    }
    // 의존성 해결에 사용할 Maven 저장소를 구성합니다.
    repositories {
        mavenCentral()
    }
    // 빌드 스크립트에 필요한 외부 종속성을 선언합니다. 여기서는 Spring Boot Gradle 플러그인 및 Spring의 의존성 관리 플러그인에 대한 의존성을 설정합니다.
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
    }
}

// 위 모든 프로젝트에 공통으로 적용되는 설정을 정의합니다.
subprojects {
    // 각각의 하위 프로젝트에 플러그인을 적용합니다. 여기서는 Java, IntelliJ IDEA, Spring Boot, 그리고 Spring의 의존성 관리 플러그인을 적용합니다.
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    // 프로젝트의 그룹 및 버전을 설정합니다.
    group 'org.example'
    version '1.0-SNAPSHOT'
    // 자바 소스 및 컴파일된 클래스의 호환성 버전을 설정합니다.
    sourceCompatibility = '1.17'
    targetCompatibility = '1.17'
    // 소스 코드의 인코딩을 UTF-8로 설정합니다.
    compileJava.options.encoding = 'UTF-8'
    // 의존성 해결에 사용할 Maven 저장소를 구성합니다.
    repositories {
        mavenCentral()
    }

    // 하위 모든 프로젝트에 공통으로 사용되는 의존성을 선언합니다.
    dependencies {
        'org.projectlombok:lombok'
        'org.springframework.boot:spring-boot-configuration-processor'
        'org.springframework.boot:spring-boot-starter-data-jpa'
        'org.junit.jupiter:junit-jupiter-api:5.7.0'
        'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    test {
        useJUnitPlatform()
    }
}

project(':module-core') {
    bootJar { enabled = false }
    jar { enabled = true }

    dependencies {}
}

project(':module-stream') {
    bootJar { enabled = true }
    jar { enabled = false }

    dependencies {
        project(':module-core')
    }
}

project(':module-api') {
    bootJar { enabled = true }
    jar { enabled = false }

    dependencies {
        project(':module-core')
        'org.springframework.boot:spring-boot-starter-web'
    }
}
// 공통 사항들
// bootJar와 jar의 차이는 bootjar는 spring boot jar로써 실행가능한 애플리케이션으로 사용되고 jar의 경우 일반적인 java 프로젝트이다.
// dependencies의 경우 module-core의 의존성을 추가하여 module-core의 소스코드 및 클래스등을 사용할 수 있게된다.